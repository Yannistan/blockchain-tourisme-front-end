[
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "owner",
        "type": "address"
      }
    ],
    "stateMutability": "nonpayable",
    "type": "constructor"
  },
  {
    "anonymous": false,
    "inputs": [
      {
        "indexed": true,
        "internalType": "address",
        "name": "previousOwner",
        "type": "address"
      },
      {
        "indexed": true,
        "internalType": "address",
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "OwnershipTransferred",
    "type": "event"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "name": "clients",
    "outputs": [
      {
        "internalType": "string",
        "name": "email",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "password",
        "type": "string"
      },
      {
        "internalType": "bool",
        "name": "isClient",
        "type": "bool"
      },
      {
        "internalType": "uint256",
        "name": "no_reservation",
        "type": "uint256"
      },
      {
        "internalType": "uint256",
        "name": "date_registration",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "name": "offers",
    "outputs": [
      {
        "internalType": "string",
        "name": "destination",
        "type": "string"
      },
      {
        "internalType": "uint256",
        "name": "priceinTokens",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "owner",
    "outputs": [
      {
        "internalType": "address",
        "name": "",
        "type": "address"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [],
    "name": "renounceOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "newOwner",
        "type": "address"
      }
    ],
    "name": "transferOwnership",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "tourAddress",
        "type": "address"
      }
    ],
    "name": "setTourToken",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_email",
        "type": "string"
      },
      {
        "internalType": "string",
        "name": "_password",
        "type": "string"
      }
    ],
    "name": "register",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "clientId",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "address",
        "name": "_addr",
        "type": "address"
      }
    ],
    "name": "getClient",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "email",
            "type": "string"
          },
          {
            "internalType": "string",
            "name": "password",
            "type": "string"
          },
          {
            "internalType": "bool",
            "name": "isClient",
            "type": "bool"
          },
          {
            "internalType": "uint256",
            "name": "no_reservation",
            "type": "uint256"
          },
          {
            "internalType": "uint256",
            "name": "date_registration",
            "type": "uint256"
          }
        ],
        "internalType": "struct Tourisme.Client",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "string",
        "name": "_destination",
        "type": "string"
      },
      {
        "internalType": "bool",
        "name": "_isSejour",
        "type": "bool"
      },
      {
        "internalType": "bool",
        "name": "_isTransport",
        "type": "bool"
      },
      {
        "internalType": "bool",
        "name": "_isRestauration",
        "type": "bool"
      },
      {
        "internalType": "bool",
        "name": "_isActivities",
        "type": "bool"
      },
      {
        "internalType": "bool",
        "name": "_isTours",
        "type": "bool"
      }
    ],
    "name": "choose_offer",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  },
  {
    "inputs": [],
    "name": "getofferID",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getPrice",
    "outputs": [
      {
        "internalType": "uint256",
        "name": "",
        "type": "uint256"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "getOffer",
    "outputs": [
      {
        "components": [
          {
            "internalType": "string",
            "name": "destination",
            "type": "string"
          },
          {
            "internalType": "uint256",
            "name": "priceinTokens",
            "type": "uint256"
          }
        ],
        "internalType": "struct Tourisme.Offer",
        "name": "",
        "type": "tuple"
      }
    ],
    "stateMutability": "view",
    "type": "function",
    "constant": true
  },
  {
    "inputs": [
      {
        "internalType": "uint256",
        "name": "_id",
        "type": "uint256"
      }
    ],
    "name": "reserveByClient",
    "outputs": [],
    "stateMutability": "nonpayable",
    "type": "function"
  }
];


/* Home version 07-12 matin */
import React, { useState, useContext, useEffect } from "react";
//import { ethers } from 'ethers'
import { Text, Button, HStack, Input } from "@chakra-ui/core";
import Register from "./Register";
import Welcome from "./Welcome";

import Web3Info from "./Web3Info";

import { Web3Context } from "../hooks/useWeb3";
import { TourismeContext } from "../App";

import GreenDot from "../images/green_dot.gif";
import RedDot from "../images/red_dot.png";

const Home = (name, email) => {
  const [web3State, login] = useContext(Web3Context);
  const Tourisme = useContext(TourismeContext);
  const [register, setRegister] = useState(false);
  const [address, setAddress] = useState("0x0");

  const handleIsRegistered = async () => {
    const res = await Tourisme.isRegistered(address);
    setRegister(res.toString());
  };

  // console.info("Registered ? ", register);

  return (
    <>
      <Text>Please provide your address :</Text>
      <Input
        value={address}
        onChange={(e) => {
          setAddress(e.currentTarget.value);
        }}
      />
      <button onClick={handleIsRegistered}>CHECK if registered</button>
      <p>{register}</p>

      {web3State.is_logged ? (
        <span className="web3on">
          <img className="greenDot" alt="web3 connected" src={GreenDot}></img>
          Web 3 connected
        </span>
      ) : (
        <>
          <p className="connectWeb3P">
            To use this app you need to{" "}
            <button className="connectWeb3Btn" onClick={login}>
              Connect Web 3
            </button>
          </p>
          <br />
          <span className="web3off">
            <img className="redDot" alt="web3 connected" src={RedDot}></img>
            Web 3 disconnected
          </span>
        </>
      )}
      {register ? <Welcome /> : <Register />}
      <Web3Info />
    </>
  );
};

export default Home;

/* Home 09-12 */

import React, { useState, useContext, useEffect } from "react";
//import { ethers } from 'ethers'

import Welcome from "./Welcome";
import Register from "./Register";

import Web3Info from "./Web3Info";

import { Web3Context } from "../hooks/useWeb3";
import { TourismeContext } from "../App";

import GreenDot from "../images/green_dot.gif";
import RedDot from "../images/red_dot.png";

const Home = () => {
  const [web3State, login] = useContext(Web3Context);
  const Tourisme = useContext(TourismeContext);
  const [register, setRegister] = useState(false);
  const [address, setAddress] = useState("0x0");
  const [addressProvided, setAddressProvided] = useState(false);

  const handleIsRegistered = async () => {
    const res = await Tourisme.isRegistered(address);
    setRegister(res);
    setAddressProvided(true);
  };

  console.info("Registered ? ", register);
  console.info("Address provided ?", addressProvided);

  return (
    <>
      {web3State.is_logged ? (
        <span className="web3on">
          <img className="greenDot" alt="web3 connected" src={GreenDot}></img>
          Web 3 connected
        </span>
      ) : (
        <>
          <p className="connectWeb3P">
            To use this app you need to{" "}
            <button className="connectWeb3Btn" onClick={login}>
              Connect Web 3
            </button>
          </p>
          <br />
          <span className="web3off">
            <img className="redDot" alt="web3 connected" src={RedDot}></img>
            Web 3 disconnected
          </span>
        </>
      )}
      {addressProvided === false && (
        <div className="formAddress ">
          <h2>Hello.</h2>
          <div className="row">
            <form>
              <div className="col-12">
                <label htmlFor="address">Please enter your address :</label>
              </div>
              <div className="col-12">
                <input
                  type="text"
                  placeholder="0x0"
                  id="address"
                  name="address"
                  value={address}
                  onChange={(e) => {
                    setAddress(e.currentTarget.value);
                  }}
                  required
                ></input>
              </div>
              <button type="button" onClick={handleIsRegistered}>
                Go
              </button>
            </form>
          </div>
        </div>
      )}
      {addressProvided && register ? <Welcome /> : ""}
      {addressProvided && !register ? <Register /> : ""}
      <Web3Info />
    </>
  );
};

export default Home;


/* handleIsRegistered old version 09-12 */
const handleIsRegistered = async () => {
    const res = await Tourisme.isRegistered(address);
    setRegister(res);
    setAddressProvided(true);
  };

  /* useEffect(() => {
    const handleIsRegistered = async () => {
      const res = await Tourisme.isRegistered(address);
      try {
       
        setRegister(res);
      } catch (e) {
        throw e;
      }
    };
    handleIsRegistered();
    
  }, []);

  */

/*  import React, { useContext, useState } from "react";
import { Web3Context } from "../hooks/useWeb3";
import { ethers } from "ethers";
import { TourismeContext } from "../App";
import { TourTokenContext } from "../App";
import { Link } from "react-router-dom";

const Welcome = () => {
  const Tourisme = useContext(TourismeContext);
  const TourToken = useContext(TourTokenContext);
 
  const [amount, setAmount] = useState(0);
  const [addrClient, setAddrClient] = useState("0x0");
  const [getTokens, setGetTokens] = useState(false);
  
  //const nbTokens = ethers.utils.parseEther(amount);
  const handleGetFreeTokens = async () => {
    await TourToken.mint(addrClient, amount);
  };

  return (
    <>
      <div className="introText">
        <div className="row">
          <div className="col-lg-6">
            <h2>Welcome</h2>
            <p>You are registered.</p>
          </div>
          <div className="col-lg-6 links">
            <Link to="/travels">Destinations</Link>
            <button onClick={() => setGetTokens(!getTokens)}>Get tokens</button>
          </div>
          <div className="getTokens">
            {getTokens && (
              <>
                <hr />
                <form>
                  <label>Client Address :</label>
                  <input
                    value={addrClient}
                    onChange={(e) => {
                      setAddrClient(e.currentTarget.value);
                    }}
                  />
                  <label>Amount in token :</label>
                  <input
                    value={amount}
                    onChange={(e) => {
                      setAmount(e.currentTarget.value);
                    }}
                  />
                  <button onClick={handleGetFreeTokens}>Get Tokens</button>
                </form>
              </>
            )}
          </div>
        </div>
      </div>
    </>
  );
};

export default Welcome; 
*/